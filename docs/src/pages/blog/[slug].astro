---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { Card, CardGrid, Aside } from '@astrojs/starlight/components';
import { getCollection, type CollectionEntry, render } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('docs', (entry) => 
    entry.id && entry.id.startsWith('blog/day-')
  );
  
  return posts.map((post) => ({
    params: { slug: post.id.replace('blog/', '') },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<'docs'>;
}

const { post } = Astro.props;

// Try to render the content
let Content;
try {
  const result = await render(post);
  Content = result.Content;
} catch (error) {
  console.error('Error rendering post:', error);
  // Fallback if render doesn't work
  Content = () => null;
}

// Extract collaboration data
const dayMatch = post.id.match(/day-(\d+)/);
const day = dayMatch ? parseInt(dayMatch[1]) : null;
const perspective = post.data.authors?.includes('human') ? 'human' : 'claude';

// Find companion post
let companionPost = null;
if (post.data.companion) {
  const allPosts = await getCollection('docs', (entry) => 
    entry.id && entry.id.startsWith('blog/day-')
  );
  companionPost = allPosts.find(p => 
    p.id && p.id.includes(post.data.companion)
  );
}

// Get related posts (same day)
const relatedPosts = [];
if (day) {
  const allPosts = await getCollection('docs', (entry) => 
    entry.id && entry.id.startsWith('blog/day-') && entry.id !== post.id
  );
  
  relatedPosts.push(...allPosts.filter(p => {
    const match = p.id.match(/day-(\d+)/);
    return match && parseInt(match[1]) === day;
  }));
}
---

<StarlightPage frontmatter={{ 
  title: post.data.title, 
  description: post.data.description 
}}>
  
  <!-- Post Meta -->
  <p>
    {perspective === 'human' ? '👨‍💻 Human Perspective' : '🤖 Claude Perspective'}
    {post.data.date && (
      <span> • {new Date(post.data.date).toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}</span>
    )}
  </p>

  {day && (
    <p>
      <strong>Day {day}</strong>
      {companionPost && (
        <span> • <a href={`/blog/${companionPost.id.replace('blog/', '')}/`}>
          {perspective === 'human' ? '🤖 See Claude\'s perspective' : '👨‍💻 See Human\'s perspective'} →
        </a></span>
      )}
    </p>
  )}
  
  {post.data.excerpt && (
    <Aside type="note" title="Summary">
      {post.data.excerpt}
    </Aside>
  )}
  
  {post.data.tags && (
    <p>
      {post.data.tags.map((tag: string, i: number) => (
        <span>
          {i > 0 && ' '}
          #{tag}
        </span>
      ))}
    </p>
  )}
  
  <!-- Post Content -->
  <Content />
  
  <!-- Related Posts / Companion -->
  {relatedPosts.length > 0 && (
    <div>
      <h3>Related Posts from Day {day}</h3>
      
      {relatedPosts.map((relatedPost) => {
        const relatedPerspective = relatedPost.data.authors?.includes('human') ? 'human' : 'claude';
        return (
          <Card 
            title={relatedPerspective === 'human' ? '👨‍💻 Human Perspective' : '🤖 Claude Perspective'}
            icon={relatedPerspective === 'human' ? 'document' : 'rocket'}
          >
            <h4>
              <a href={`/blog/${relatedPost.id.replace('blog/', '')}/`}>
                {relatedPost.data.title}
              </a>
            </h4>
            <p>{relatedPost.data.excerpt}</p>
          </Card>
        );
      })}
      
      {day && (
        <div>
          <Card title="📊 Compare Both Views">
            <p>See how human curiosity and AI insights approached the same challenges on Day {day}.</p>
            <p><a href={`/blog/day-${day}/both/`}>Read Both Perspectives Side-by-Side →</a></p>
          </Card>
        </div>
      )}
    </div>
  )}
  
  <!-- Navigation -->
  <hr />
  <nav>
    <p>
      {day && day > 1 && (
        <a href={`/blog/day-${day - 1}/both/`}>← Day {day - 1}</a>
      )}
      {day && day > 1 && ' • '}
      <a href="/blog/">All Posts</a>
      {' • '}
      <span>To be continued...</span>
    </p>
  </nav>
</StarlightPage>