---
import { Card, CardGrid, Aside } from '@astrojs/starlight/components';
import Pagination from '@astrojs/starlight/components/Pagination.astro';
import { getCollection } from 'astro:content';

interface Props {
  humanPost: any;
  claudePost: any;
  day: number;
}

const { humanPost, claudePost, day } = Astro.props;

// Get all available days to check if next/previous days exist
const allPosts = await getCollection('docs', (entry) => 
  entry.id && entry.id.startsWith('blog/day-')
);

// Extract unique day numbers
const availableDays = [...new Set(
  allPosts.map(post => {
    const match = post.id.match(/day-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }).filter(Boolean)
)].sort((a, b) => a - b);

const hasPreviousDay = availableDays.includes(day - 1);
const hasNextDay = availableDays.includes(day + 1);
---

<div>
  <h1>Day {day}: Dual Perspective</h1>
  <p>Compare human curiosity and AI implementation side-by-side</p>
  
  <Aside type="tip">
    Read both perspectives to see how human questions and AI insights combine to drive our database development forward.
  </Aside>
  
  <CardGrid>
    <Card title="👨‍💻 Human Perspective" icon="user">
      <h3>{humanPost.data.title}</h3>
      <p>{humanPost.data.excerpt}</p>
      
      {humanPost.data.insights && (
        <div>
          {humanPost.data.insights.questionsAsked && (
            <p>❓ <strong>Questions Asked:</strong> {humanPost.data.insights.questionsAsked}</p>
          )}
          {humanPost.data.insights.iterations && (
            <p>🔄 <strong>Iterations:</strong> {humanPost.data.insights.iterations}</p>
          )}
          {humanPost.data.insights.breakthroughMoment && (
            <p>💡 <strong>Breakthrough:</strong> "{humanPost.data.insights.breakthroughMoment}"</p>
          )}
        </div>
      )}
      
      <p><a href={`/blog/${humanPost.id.replace('blog/', '')}/`}>Read Full Human Post →</a></p>
    </Card>
    
    <Card title="🤖 Claude Perspective" icon="rocket">
      <h3>{claudePost.data.title}</h3>
      <p>{claudePost.data.excerpt}</p>
      
      {claudePost.data.insights && (
        <div>
          {claudePost.data.insights.filesModified && (
            <p>📁 <strong>Files Modified:</strong> {claudePost.data.insights.filesModified}</p>
          )}
          {claudePost.data.insights.patternsObserved && (
            <p>🔍 <strong>Patterns Observed:</strong> {claudePost.data.insights.patternsObserved.length}</p>
          )}
          {claudePost.data.insights.keyLearning && (
            <p>🎯 <strong>Key Learning:</strong> "{claudePost.data.insights.keyLearning}"</p>
          )}
        </div>
      )}
      
      <p><a href={`/blog/${claudePost.id.replace('blog/', '')}/`}>Read Full Claude Post →</a></p>
    </Card>
  </CardGrid>

  <Aside type="note" title="Collaboration Highlights">
    Day {day} showcased {humanPost.data.insights?.questionsAsked || 0} questions, 
    {humanPost.data.insights?.iterations || claudePost.data.insights?.filesModified || 0} iterations, 
    and {claudePost.data.insights?.patternsObserved?.length || 0} collaboration patterns.
  </Aside>
  
  <Pagination 
    labels={{
      'page.previousLink': 'Previous',
      'page.nextLink': hasNextDay ? 'Next' : 'To be continued...'
    }}
    pagination={{
      prev: hasPreviousDay ? {
        href: `/blog/day-${day - 1}/both/`,
        label: `Day ${day - 1}`
      } : undefined,
      next: hasNextDay ? {
        href: `/blog/day-${day + 1}/both/`,
        label: `Day ${day + 1}`
      } : {
        href: '/blog/',
        label: 'Back to all posts'
      }
    }}
  />
</div>

