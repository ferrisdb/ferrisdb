name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

# Cancel in-progress runs when a new run is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Detect what files changed to optimize CI runs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          rust:
            - '**/*.rs'
            - '**/Cargo.toml'
            - '**/Cargo.lock'
            - '.github/workflows/**'
            - 'deny.toml'
            - 'ferrisdb-tutorials/**'
          docs:
            - 'docs/**'
            - '**/*.md'
            - 'README.md'
            - 'CLAUDE.md'
            - 'docs/**'

  # Quick checks that should pass before running expensive tests
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Markdown formatting check
  markdown:
    name: Markdown Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install prettier
      run: npm install --global prettier

    - name: Check markdown formatting
      run: prettier --check "**/*.md" "**/*.mdx"

  # Spell check
  spellcheck:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check spelling
      uses: crate-ci/typos@master
      with:
        files: |
          docs/
          *.md
          src/
          ferrisdb-*/src/
          ferrisdb-tutorials/
          docs/

  # Main test suite
  test:
    name: Test Suite
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by only testing beta on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macOS-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Build workspace
      run: cargo build --all --verbose

    - name: Run tests
      run: cargo test --all --verbose

    - name: Build release
      if: matrix.rust == 'stable'
      run: cargo build --all --release --verbose

  # Documentation build
  docs:
    name: Documentation
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --all --no-deps
      env:
        RUSTDOCFLAGS: "-D warnings"

    - name: Check documentation links
      run: cargo doc --all --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings -D rustdoc::broken_intra_doc_links"

  # Minimum supported Rust version
  msrv:
    name: MSRV (1.81.0)
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust 1.81.0
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.81.0

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2

    - name: Build with MSRV
      run: cargo build --all

    - name: Test with MSRV
      run: cargo test --all

  # Tutorial tests
  tutorials:
    name: Tutorial Tests
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo for tutorials
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: ferrisdb-tutorials
        key: tutorials

    - name: Check tutorial formatting
      run: |
        cd ferrisdb-tutorials
        cargo fmt --all -- --check

    - name: Clippy for tutorials
      run: |
        cd ferrisdb-tutorials
        cargo clippy --all-targets --all-features -- -D warnings

    - name: Build tutorials
      run: |
        cd ferrisdb-tutorials
        cargo build --all --verbose

    - name: Run tutorial tests
      run: |
        cd ferrisdb-tutorials
        # Test all main implementations and solutions
        # Exclude exercise template tests which contain todo!() for students
        cargo test --workspace --tests --bins --benches --verbose
        
    - name: Verify exercise templates compile
      run: |
        cd ferrisdb-tutorials
        # Ensure exercise templates compile but don't run their failing tests
        for tutorial in tutorial-*/; do
          if [ -d "$tutorial/examples/exercises" ]; then
            echo "Verifying exercise compilation in $tutorial"
            (cd "$tutorial" && cargo check --example exercises)
          fi
        done

  # Starlight documentation build
  starlight:
    name: Starlight Docs Build
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: docs/package-lock.json

    - name: Install dependencies
      run: |
        cd docs
        npm ci

    - name: Build Starlight site
      run: |
        cd docs
        npm run build

    - name: Check for broken links
      run: |
        cd docs
        # Basic check that build succeeded and created output
        test -d dist
        test -f dist/index.html

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      uses: rustsec/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # All required checks must pass
  required:
    name: Required Checks
    runs-on: ubuntu-latest
    needs: [changes, quick-checks, markdown, spellcheck, test, docs, msrv, tutorials, starlight, security]
    if: always()
    steps:
    - name: Verify all checks passed
      run: |
        # Check if any job actually failed (not skipped)
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "One or more required checks failed"
          exit 1
        fi
        
        # For docs-only changes, only check docs-related jobs
        if [[ "${{ needs.changes.outputs.rust }}" == "false" ]]; then
          # Only docs changed - check markdown, spellcheck, starlight
          for job in markdown spellcheck starlight; do
            result=$(echo '${{ toJSON(needs) }}' | jq -r ".[\"$job\"].result")
            if [[ "$result" == "failure" ]]; then
              echo "Docs job $job failed"
              exit 1
            fi
          done
          echo "All docs checks passed"
        else
          # Rust changes - all jobs should have run and passed
          for job in quick-checks test docs msrv security markdown spellcheck starlight; do
            result=$(echo '${{ toJSON(needs) }}' | jq -r ".[\"$job\"].result")
            if [[ "$result" == "failure" ]]; then
              echo "Job $job failed"
              exit 1
            fi
          done
          echo "All checks passed"
        fi